/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package prg371.project.bookings.presentation.frames;

import java.sql.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import prg371.project.bookings.Main;
import prg371.project.bookings.business.enums.BookingStatusTypes;
import prg371.project.bookings.business.enums.MenuItemCategoryTypes;
import prg371.project.bookings.business.enums.NotificationTypes;
import prg371.project.bookings.business.enums.UserTypes;
import prg371.project.bookings.business.models.BookingModel;
import prg371.project.bookings.business.models.EventTypeModel;
import prg371.project.bookings.business.models.MenuItemModel;
import prg371.project.bookings.business.models.NotificationModel;
import prg371.project.bookings.presentation.controllers.BookingController;
import prg371.project.bookings.presentation.controllers.EventTypeController;
import prg371.project.bookings.presentation.controllers.MenuItemController;
import prg371.project.bookings.presentation.controllers.NotificationController;
import prg371.project.bookings.presentation.controllers.UserController;
import prg371.project.bookings.presentation.utilities.FrameUtils;

/**
 *
 * @author User
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form AdminFrame
     */
    private final UserController userController = new UserController();
    private final EventTypeController eventTypeController = new EventTypeController();
    private final MenuItemController menuItemController = new MenuItemController();
    private final BookingController bookingController = new BookingController();
    private final NotificationController notificationController = new NotificationController();
    
    public MainFrame() {
        initComponents();
        
        if (Main.currentUser.getType() == UserTypes.Admin) {
            loadEventTypes();
            loadMenuItems();
            loadEventTypesLinkedMenuItems();

            for (MenuItemCategoryTypes type : MenuItemCategoryTypes.values()) {
                cmbMenuItemCategoryType.addItem(type.getDescription());
            }
            
            btnBookingConfirm.setEnabled(true);
        } else {
            MainTabs.remove(tabEventTypes);
            MainTabs.remove(tabMenuItems);
            MainTabs.remove(tabLinkMenuItemsToEventTypes);
            btnBookingConfirm.setEnabled(false);
        }
        
        loadBookings();
        loadBookingMenuItems(0, null);
        loadBookingEventTypes();
        loadNotifications();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        buttonGroup8 = new javax.swing.ButtonGroup();
        MainTabs = new javax.swing.JTabbedPane();
        tabBookings = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblBookingMenuItems = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cmbBookingMenuItem = new javax.swing.JComboBox<>();
        lblBookingMenuItem = new javax.swing.JLabel();
        lblBookingMenuItemAmount = new javax.swing.JLabel();
        txtBookingMenuItemAmount = new javax.swing.JTextField();
        btnBookingAddMenuItem = new javax.swing.JButton();
        btnBookingUpdateMenuItem = new javax.swing.JButton();
        btnBookingRemoveMenuItem = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblBookings = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        btnBookingUpdate = new javax.swing.JButton();
        btnBookingRemove = new javax.swing.JButton();
        btnBookingConfirm = new javax.swing.JButton();
        pnlBookingDetails = new javax.swing.JPanel();
        btnBookingReset = new javax.swing.JButton();
        btnBookingAdd = new javax.swing.JButton();
        lblBookingDecorateOptIn = new javax.swing.JLabel();
        lblBookingEventDate = new javax.swing.JLabel();
        dtcBookingEventDate = new com.toedter.calendar.JDateChooser();
        lblBookingEventType = new javax.swing.JLabel();
        cmbBookingEventType = new javax.swing.JComboBox<>();
        ckbBookingDecorationOptIn = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        lblBookingAdultCount = new javax.swing.JLabel();
        lblBookingChildCount = new javax.swing.JLabel();
        lblBookingCalculatedPrice = new javax.swing.JLabel();
        lblBookingVenueAddress = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtBookingVenueAddress = new javax.swing.JTextArea();
        txtBookingCalculatedPrice = new javax.swing.JTextField();
        txtBookingChildCount = new javax.swing.JTextField();
        txtBookingAdultCount = new javax.swing.JTextField();
        tabNotifications = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblNotifications = new javax.swing.JTable();
        btnDismissNotification = new javax.swing.JButton();
        lblNotifications = new javax.swing.JLabel();
        btnNotificationRefresh = new javax.swing.JButton();
        tabEventTypes = new javax.swing.JPanel();
        lblEventDescription = new javax.swing.JLabel();
        lblEventAmount = new javax.swing.JLabel();
        txtEventAmount = new javax.swing.JTextField();
        txtEventDescription = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEventTypes = new javax.swing.JTable();
        btnRemoveEvent = new javax.swing.JButton();
        btnAddEvent = new javax.swing.JButton();
        btnUpdateEvent = new javax.swing.JButton();
        btnResetEvent = new javax.swing.JButton();
        tabMenuItems = new javax.swing.JPanel();
        lblMenuItemName = new javax.swing.JLabel();
        lblMenuItemDescription = new javax.swing.JLabel();
        txtMenuItemDescription = new javax.swing.JTextField();
        txtMenuItemName = new javax.swing.JTextField();
        btnResetMenuItem = new javax.swing.JButton();
        btnAddMenuItem = new javax.swing.JButton();
        btnUpdateMenuItem = new javax.swing.JButton();
        btnRemoveMenuItem = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMenuItems = new javax.swing.JTable();
        lblMenuItemCategoryType = new javax.swing.JLabel();
        lblMenuItemPrice = new javax.swing.JLabel();
        cmbMenuItemCategoryType = new javax.swing.JComboBox<>();
        txtMenuItemPrice = new javax.swing.JTextField();
        tabLinkMenuItemsToEventTypes = new javax.swing.JPanel();
        lblLinkEvent = new javax.swing.JLabel();
        cmbLinkEvent = new javax.swing.JComboBox<>();
        btnResetLink = new javax.swing.JButton();
        btnAddLink = new javax.swing.JButton();
        btnRemoveLink = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblEventTypeMenuItems = new javax.swing.JTable();
        lblLinkMenuItem = new javax.swing.JLabel();
        cmbLinkMenuItem = new javax.swing.JComboBox<>();
        btnLogout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 102, 102));

        MainTabs.setBackground(new java.awt.Color(153, 102, 255));
        MainTabs.setForeground(new java.awt.Color(255, 255, 255));
        MainTabs.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        MainTabs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                MainTabsStateChanged(evt);
            }
        });

        tabBookings.setBackground(new java.awt.Color(255, 204, 204));

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));

        tblBookingMenuItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Category", "Menu Item", "Amount", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBookingMenuItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBookingMenuItemsMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tblBookingMenuItems);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Menu Items:");

        cmbBookingMenuItem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblBookingMenuItem.setText("Selected Menu Item:");

        lblBookingMenuItemAmount.setText("Menu Item Amount:");

        btnBookingAddMenuItem.setBackground(new java.awt.Color(102, 255, 102));
        btnBookingAddMenuItem.setText("Add Menu Item");
        btnBookingAddMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookingAddMenuItemActionPerformed(evt);
            }
        });

        btnBookingUpdateMenuItem.setBackground(new java.awt.Color(51, 153, 255));
        btnBookingUpdateMenuItem.setText("Update Menu Item");
        btnBookingUpdateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookingUpdateMenuItemActionPerformed(evt);
            }
        });

        btnBookingRemoveMenuItem.setBackground(new java.awt.Color(255, 153, 0));
        btnBookingRemoveMenuItem.setText("Remove Menu Item");
        btnBookingRemoveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookingRemoveMenuItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblBookingMenuItem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbBookingMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblBookingMenuItemAmount)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtBookingMenuItemAmount)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(btnBookingAddMenuItem)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnBookingUpdateMenuItem)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnBookingRemoveMenuItem))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBookingMenuItem)
                    .addComponent(cmbBookingMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBookingMenuItemAmount)
                    .addComponent(txtBookingMenuItemAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnBookingAddMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnBookingRemoveMenuItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBookingUpdateMenuItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        jPanel2.setBackground(new java.awt.Color(255, 204, 204));

        tblBookings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Event Type", "Status", "Decoration Opt In", "Event Date", "Adult Number", "Child Number", "Calculated Price", "Venue Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBookings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBookingsMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblBookings);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Current Bookings:");

        btnBookingUpdate.setBackground(new java.awt.Color(51, 153, 255));
        btnBookingUpdate.setText("Update Booking");
        btnBookingUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookingUpdateActionPerformed(evt);
            }
        });

        btnBookingRemove.setBackground(new java.awt.Color(255, 0, 0));
        btnBookingRemove.setText("Cancel Booking");
        btnBookingRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookingRemoveActionPerformed(evt);
            }
        });

        btnBookingConfirm.setBackground(new java.awt.Color(102, 255, 102));
        btnBookingConfirm.setText("Confirm Booking");
        btnBookingConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookingConfirmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(426, 426, 426)
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(316, 316, 316)
                .addComponent(btnBookingUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBookingConfirm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBookingRemove)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBookingUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBookingRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBookingConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pnlBookingDetails.setBackground(new java.awt.Color(255, 204, 204));

        btnBookingReset.setBackground(new java.awt.Color(255, 153, 0));
        btnBookingReset.setText("Reset Booking");
        btnBookingReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookingResetActionPerformed(evt);
            }
        });

        btnBookingAdd.setBackground(new java.awt.Color(102, 255, 102));
        btnBookingAdd.setText("Add Booking");
        btnBookingAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookingAddActionPerformed(evt);
            }
        });

        lblBookingDecorateOptIn.setText("Do you want Decorations?");

        lblBookingEventDate.setText("Event Date:");

        lblBookingEventType.setText("Event Type:");

        cmbBookingEventType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbBookingEventType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbBookingEventTypeItemStateChanged(evt);
            }
        });
        cmbBookingEventType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbBookingEventTypeActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Booking Details:");

        lblBookingAdultCount.setText("Number of Adults:");

        lblBookingChildCount.setText("Number of Children:");

        lblBookingCalculatedPrice.setText("Calculated Price:");

        lblBookingVenueAddress.setText("Venue Address:");

        txtBookingVenueAddress.setColumns(20);
        txtBookingVenueAddress.setRows(5);
        jScrollPane6.setViewportView(txtBookingVenueAddress);

        txtBookingCalculatedPrice.setEnabled(false);

        javax.swing.GroupLayout pnlBookingDetailsLayout = new javax.swing.GroupLayout(pnlBookingDetails);
        pnlBookingDetails.setLayout(pnlBookingDetailsLayout);
        pnlBookingDetailsLayout.setHorizontalGroup(
            pnlBookingDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBookingDetailsLayout.createSequentialGroup()
                .addGroup(pnlBookingDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(pnlBookingDetailsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane6))
                    .addGroup(pnlBookingDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlBookingDetailsLayout.createSequentialGroup()
                            .addGap(229, 229, 229)
                            .addComponent(jLabel2))
                        .addGroup(pnlBookingDetailsLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(lblBookingVenueAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlBookingDetailsLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(pnlBookingDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pnlBookingDetailsLayout.createSequentialGroup()
                                    .addComponent(lblBookingEventType)
                                    .addGap(18, 18, 18)
                                    .addComponent(cmbBookingEventType, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(pnlBookingDetailsLayout.createSequentialGroup()
                                    .addComponent(lblBookingDecorateOptIn)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(ckbBookingDecorationOptIn))
                                .addGroup(pnlBookingDetailsLayout.createSequentialGroup()
                                    .addComponent(lblBookingEventDate)
                                    .addGap(18, 18, 18)
                                    .addComponent(dtcBookingEventDate, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(20, 20, 20)
                            .addGroup(pnlBookingDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblBookingCalculatedPrice)
                                .addGroup(pnlBookingDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblBookingChildCount, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblBookingAdultCount)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(pnlBookingDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtBookingAdultCount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBookingDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtBookingChildCount)
                                    .addComponent(txtBookingCalculatedPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBookingDetailsLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnBookingAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBookingReset, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(184, 184, 184))
        );
        pnlBookingDetailsLayout.setVerticalGroup(
            pnlBookingDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBookingDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGroup(pnlBookingDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBookingDetailsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlBookingDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBookingEventType)
                            .addComponent(cmbBookingEventType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlBookingDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblBookingEventDate)
                            .addComponent(dtcBookingEventDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(pnlBookingDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblBookingDecorateOptIn)
                            .addComponent(ckbBookingDecorationOptIn))
                        .addGap(7, 7, 7)
                        .addComponent(lblBookingVenueAddress)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(pnlBookingDetailsLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(pnlBookingDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBookingAdultCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBookingAdultCount))
                        .addGap(18, 18, 18)
                        .addGroup(pnlBookingDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBookingChildCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBookingChildCount))
                        .addGap(17, 17, 17)
                        .addGroup(pnlBookingDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBookingCalculatedPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBookingCalculatedPrice))
                        .addGap(22, 22, 22)))
                .addGap(6, 6, 6)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlBookingDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBookingAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBookingReset, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(313, 313, 313))
        );

        javax.swing.GroupLayout tabBookingsLayout = new javax.swing.GroupLayout(tabBookings);
        tabBookings.setLayout(tabBookingsLayout);
        tabBookingsLayout.setHorizontalGroup(
            tabBookingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabBookingsLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(tabBookingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(tabBookingsLayout.createSequentialGroup()
                        .addComponent(pnlBookingDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(245, 245, 245))
        );
        tabBookingsLayout.setVerticalGroup(
            tabBookingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabBookingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabBookingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlBookingDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(245, 245, 245))
        );

        MainTabs.addTab("Bookings", tabBookings);

        tabNotifications.setBackground(new java.awt.Color(102, 204, 255));

        tblNotifications.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "NotificationId", "BookingId", "Message", "Type", "Date Created"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(tblNotifications);

        btnDismissNotification.setBackground(new java.awt.Color(255, 153, 0));
        btnDismissNotification.setText("Dismiss Notification");
        btnDismissNotification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDismissNotificationActionPerformed(evt);
            }
        });

        lblNotifications.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblNotifications.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNotifications.setText("Notifications:");

        btnNotificationRefresh.setBackground(new java.awt.Color(51, 153, 255));
        btnNotificationRefresh.setText("Refresh");
        btnNotificationRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNotificationRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabNotificationsLayout = new javax.swing.GroupLayout(tabNotifications);
        tabNotifications.setLayout(tabNotificationsLayout);
        tabNotificationsLayout.setHorizontalGroup(
            tabNotificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabNotificationsLayout.createSequentialGroup()
                .addGroup(tabNotificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabNotificationsLayout.createSequentialGroup()
                        .addGap(442, 442, 442)
                        .addComponent(lblNotifications)
                        .addGap(154, 154, 154)
                        .addComponent(btnNotificationRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDismissNotification, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tabNotificationsLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 1020, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        tabNotificationsLayout.setVerticalGroup(
            tabNotificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabNotificationsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabNotificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDismissNotification, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNotifications)
                    .addComponent(btnNotificationRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 662, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        MainTabs.addTab("Notifications", tabNotifications);

        tabEventTypes.setBackground(new java.awt.Color(255, 204, 153));

        lblEventDescription.setText("Description:");

        lblEventAmount.setText("Amount:");

        tblEventTypes.setAutoCreateRowSorter(true);
        tblEventTypes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Description", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEventTypes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEventTypesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblEventTypes);

        btnRemoveEvent.setBackground(new java.awt.Color(255, 0, 0));
        btnRemoveEvent.setText("Delete");
        btnRemoveEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveEventActionPerformed(evt);
            }
        });

        btnAddEvent.setBackground(new java.awt.Color(102, 255, 102));
        btnAddEvent.setText("Add");
        btnAddEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEventActionPerformed(evt);
            }
        });

        btnUpdateEvent.setBackground(new java.awt.Color(51, 153, 255));
        btnUpdateEvent.setText("Update");
        btnUpdateEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateEventActionPerformed(evt);
            }
        });

        btnResetEvent.setBackground(new java.awt.Color(255, 153, 0));
        btnResetEvent.setText("Reset");
        btnResetEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetEventActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabEventTypesLayout = new javax.swing.GroupLayout(tabEventTypes);
        tabEventTypes.setLayout(tabEventTypesLayout);
        tabEventTypesLayout.setHorizontalGroup(
            tabEventTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabEventTypesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabEventTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEventDescription)
                    .addComponent(lblEventAmount))
                .addGap(18, 18, 18)
                .addGroup(tabEventTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtEventDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                    .addComponent(txtEventAmount))
                .addContainerGap(634, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabEventTypesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(tabEventTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabEventTypesLayout.createSequentialGroup()
                        .addComponent(btnResetEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAddEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdateEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemoveEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1012, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );
        tabEventTypesLayout.setVerticalGroup(
            tabEventTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabEventTypesLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(tabEventTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEventDescription)
                    .addComponent(txtEventDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabEventTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEventAmount)
                    .addComponent(txtEventAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(tabEventTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdateEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoveEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnResetEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        MainTabs.addTab("Event Types", tabEventTypes);

        tabMenuItems.setBackground(new java.awt.Color(0, 102, 102));

        lblMenuItemName.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblMenuItemName.setForeground(new java.awt.Color(255, 255, 255));
        lblMenuItemName.setText("Name:");

        lblMenuItemDescription.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblMenuItemDescription.setForeground(new java.awt.Color(255, 255, 255));
        lblMenuItemDescription.setText("Description:");

        btnResetMenuItem.setBackground(new java.awt.Color(255, 153, 0));
        btnResetMenuItem.setText("Reset");
        btnResetMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetMenuItemActionPerformed(evt);
            }
        });

        btnAddMenuItem.setBackground(new java.awt.Color(102, 255, 102));
        btnAddMenuItem.setText("Add");
        btnAddMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMenuItemActionPerformed(evt);
            }
        });

        btnUpdateMenuItem.setBackground(new java.awt.Color(51, 153, 255));
        btnUpdateMenuItem.setText("Update");
        btnUpdateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateMenuItemActionPerformed(evt);
            }
        });

        btnRemoveMenuItem.setBackground(new java.awt.Color(255, 0, 0));
        btnRemoveMenuItem.setText("Delete");
        btnRemoveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveMenuItemActionPerformed(evt);
            }
        });

        tblMenuItems.setAutoCreateRowSorter(true);
        tblMenuItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Name", "Description", "Category Type", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMenuItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMenuItemsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblMenuItems);
        if (tblMenuItems.getColumnModel().getColumnCount() > 0) {
            tblMenuItems.getColumnModel().getColumn(3).setHeaderValue("Category Type");
            tblMenuItems.getColumnModel().getColumn(4).setHeaderValue("Price");
        }

        lblMenuItemCategoryType.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblMenuItemCategoryType.setForeground(new java.awt.Color(255, 255, 255));
        lblMenuItemCategoryType.setText("Category Type:");

        lblMenuItemPrice.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblMenuItemPrice.setForeground(new java.awt.Color(255, 255, 255));
        lblMenuItemPrice.setText("Price:");

        cmbMenuItemCategoryType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMenuItemCategoryTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabMenuItemsLayout = new javax.swing.GroupLayout(tabMenuItems);
        tabMenuItems.setLayout(tabMenuItemsLayout);
        tabMenuItemsLayout.setHorizontalGroup(
            tabMenuItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabMenuItemsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabMenuItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMenuItemName)
                    .addComponent(lblMenuItemDescription)
                    .addComponent(lblMenuItemCategoryType)
                    .addComponent(lblMenuItemPrice))
                .addGap(16, 16, 16)
                .addGroup(tabMenuItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmbMenuItemCategoryType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtMenuItemName)
                    .addComponent(txtMenuItemDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                    .addComponent(txtMenuItemPrice))
                .addContainerGap(616, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabMenuItemsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(tabMenuItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabMenuItemsLayout.createSequentialGroup()
                        .addComponent(btnResetMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAddMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdateMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemoveMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1030, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );
        tabMenuItemsLayout.setVerticalGroup(
            tabMenuItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabMenuItemsLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(tabMenuItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMenuItemName)
                    .addComponent(txtMenuItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabMenuItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMenuItemDescription)
                    .addComponent(txtMenuItemDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(tabMenuItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbMenuItemCategoryType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMenuItemCategoryType))
                .addGap(18, 18, 18)
                .addGroup(tabMenuItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMenuItemPrice)
                    .addComponent(txtMenuItemPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabMenuItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdateMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoveMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnResetMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(252, Short.MAX_VALUE))
        );

        MainTabs.addTab("Menu Items", tabMenuItems);

        tabLinkMenuItemsToEventTypes.setBackground(new java.awt.Color(51, 153, 0));

        lblLinkEvent.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblLinkEvent.setForeground(new java.awt.Color(255, 255, 255));
        lblLinkEvent.setText("Event Type:");

        cmbLinkEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLinkEventActionPerformed(evt);
            }
        });

        btnResetLink.setBackground(new java.awt.Color(255, 153, 0));
        btnResetLink.setText("Reset");
        btnResetLink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetLinkActionPerformed(evt);
            }
        });

        btnAddLink.setBackground(new java.awt.Color(102, 255, 102));
        btnAddLink.setText("Add");
        btnAddLink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddLinkActionPerformed(evt);
            }
        });

        btnRemoveLink.setBackground(new java.awt.Color(255, 0, 0));
        btnRemoveLink.setText("Delete");
        btnRemoveLink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveLinkActionPerformed(evt);
            }
        });

        tblEventTypeMenuItems.setAutoCreateRowSorter(true);
        tblEventTypeMenuItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Event Type", "Menu Item"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEventTypeMenuItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEventTypeMenuItemsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblEventTypeMenuItems);

        lblLinkMenuItem.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblLinkMenuItem.setForeground(new java.awt.Color(255, 255, 255));
        lblLinkMenuItem.setText("Menu Item:");

        cmbLinkMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLinkMenuItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabLinkMenuItemsToEventTypesLayout = new javax.swing.GroupLayout(tabLinkMenuItemsToEventTypes);
        tabLinkMenuItemsToEventTypes.setLayout(tabLinkMenuItemsToEventTypesLayout);
        tabLinkMenuItemsToEventTypesLayout.setHorizontalGroup(
            tabLinkMenuItemsToEventTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabLinkMenuItemsToEventTypesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabLinkMenuItemsToEventTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(tabLinkMenuItemsToEventTypesLayout.createSequentialGroup()
                        .addComponent(lblLinkEvent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbLinkEvent, 0, 348, Short.MAX_VALUE))
                    .addGroup(tabLinkMenuItemsToEventTypesLayout.createSequentialGroup()
                        .addComponent(lblLinkMenuItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbLinkMenuItem, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(636, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabLinkMenuItemsToEventTypesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(tabLinkMenuItemsToEventTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabLinkMenuItemsToEventTypesLayout.createSequentialGroup()
                        .addComponent(btnResetLink, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAddLink, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemoveLink, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1021, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );
        tabLinkMenuItemsToEventTypesLayout.setVerticalGroup(
            tabLinkMenuItemsToEventTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabLinkMenuItemsToEventTypesLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(tabLinkMenuItemsToEventTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLinkEvent)
                    .addComponent(cmbLinkEvent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabLinkMenuItemsToEventTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLinkMenuItem)
                    .addComponent(cmbLinkMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabLinkMenuItemsToEventTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddLink, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnResetLink, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoveLink, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
                .addContainerGap())
        );

        MainTabs.addTab("Link Menu Items to Event Types", tabLinkMenuItemsToEventTypes);

        btnLogout.setBackground(new java.awt.Color(0, 204, 204));
        btnLogout.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnLogout.setText("Logout");
        MainTabs.addTab("Logout", btnLogout);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 1067, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MainTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 788, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEventActionPerformed
        if (eventTypeController.addEventType(
                txtEventDescription.getText(), 
                txtEventAmount.getText()
        )) {
            clearEventInputs();
            loadEventTypes();
        }
    }//GEN-LAST:event_btnAddEventActionPerformed

    private void btnUpdateEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateEventActionPerformed
        int selectedRow = tblEventTypes.getSelectedRow();
        if (selectedRow != -1) {
            int id = (int)tblEventTypes.getValueAt(selectedRow, 0);
            if (eventTypeController.updateEventType(
                id,
                txtEventDescription.getText(), 
                txtEventAmount.getText()
            )) {
                clearEventInputs();
                loadEventTypes();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update");
        }
    }//GEN-LAST:event_btnUpdateEventActionPerformed

    private void tblEventTypesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEventTypesMouseClicked
        int selectedRow = tblEventTypes.getSelectedRow();
        if (selectedRow != -1) {
            txtEventDescription.setText(
                tblEventTypes.getValueAt(selectedRow, 1).toString()
            );
            
            txtEventAmount.setText(
                tblEventTypes.getValueAt(selectedRow, 2).toString()
            );
        }
    }//GEN-LAST:event_tblEventTypesMouseClicked

    private void btnRemoveEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveEventActionPerformed
        int selectedRow = tblEventTypes.getSelectedRow();
        if (selectedRow != -1) {
            int id = (int)tblEventTypes.getValueAt(selectedRow, 0);
            if (eventTypeController.deleteEventType(id)) {
                clearEventInputs();
                loadEventTypes();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to remove");
        }
    }//GEN-LAST:event_btnRemoveEventActionPerformed

    private void btnResetEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetEventActionPerformed
        clearEventInputs();
    }//GEN-LAST:event_btnResetEventActionPerformed

    private void btnResetMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetMenuItemActionPerformed
        clearMenuItemInputs();
    }//GEN-LAST:event_btnResetMenuItemActionPerformed

    private void btnAddMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMenuItemActionPerformed
        if (menuItemController.addMenuItem(
            txtMenuItemName.getText(),
            txtMenuItemDescription.getText(),
            cmbMenuItemCategoryType.getSelectedIndex(),
            txtMenuItemPrice.getText()
        )) {
            clearMenuItemInputs();
            loadMenuItems();
        }
    }//GEN-LAST:event_btnAddMenuItemActionPerformed

    private void btnUpdateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateMenuItemActionPerformed
        int selectedRow = tblMenuItems.getSelectedRow();
        if (selectedRow != -1) {
            int id = (int)tblMenuItems.getValueAt(selectedRow, 0);
            if (menuItemController.updateMenuItem(
                id,
                txtMenuItemName.getText(),
                txtMenuItemDescription.getText(),
                cmbMenuItemCategoryType.getSelectedIndex(),
                txtMenuItemPrice.getText()
            )) {
                clearMenuItemInputs();
                loadMenuItems();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update");
        }
    }//GEN-LAST:event_btnUpdateMenuItemActionPerformed

    private void btnRemoveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveMenuItemActionPerformed
        int selectedRow = tblMenuItems.getSelectedRow();
        if (selectedRow != -1) {
            int id = (int)tblMenuItems.getValueAt(selectedRow, 0);
            if (menuItemController.deleteMenuType(id)) {
                clearMenuItemInputs();
                loadMenuItems();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to remove");
        }
    }//GEN-LAST:event_btnRemoveMenuItemActionPerformed

    private void tblMenuItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMenuItemsMouseClicked
        int selectedRow = tblMenuItems.getSelectedRow();
        if (selectedRow != -1) {
            txtMenuItemName.setText(
                tblMenuItems.getValueAt(selectedRow, 1).toString()
            );
            
            txtMenuItemDescription.setText(
                tblMenuItems.getValueAt(selectedRow, 2).toString()
            );
            
            cmbMenuItemCategoryType.setSelectedIndex(
                MenuItemCategoryTypes.fromDescription(tblMenuItems.getValueAt(selectedRow, 3).toString()).getKey()
            );
            
            txtMenuItemPrice.setText(
                tblMenuItems.getValueAt(selectedRow, 4).toString()
            );
        }
    }//GEN-LAST:event_tblMenuItemsMouseClicked

    private void cmbMenuItemCategoryTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMenuItemCategoryTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbMenuItemCategoryTypeActionPerformed

    private void cmbLinkEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbLinkEventActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbLinkEventActionPerformed

    private void btnResetLinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetLinkActionPerformed
        clearEventTypesLinkedMenuItemsInputs();
    }//GEN-LAST:event_btnResetLinkActionPerformed

    private void btnAddLinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddLinkActionPerformed
        if (eventTypeController.addLinkedMenuItem(
            cmbLinkEvent.getSelectedIndex() + 1,
            cmbLinkMenuItem.getSelectedIndex() + 1
        )) {
            clearEventTypesLinkedMenuItemsInputs();
            loadEventTypesLinkedMenuItems();
        }
    }//GEN-LAST:event_btnAddLinkActionPerformed

    private void btnRemoveLinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveLinkActionPerformed
        
    }//GEN-LAST:event_btnRemoveLinkActionPerformed

    private void tblEventTypeMenuItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEventTypeMenuItemsMouseClicked
        int selectedRow = tblEventTypeMenuItems.getSelectedRow();
        if (selectedRow != -1) {
            int eventIndex = FrameUtils.getIndexByValue(cmbLinkEvent, tblEventTypeMenuItems.getValueAt(selectedRow, 1));
            int menuItemIndex = FrameUtils.getIndexByValue(cmbLinkEvent, tblEventTypeMenuItems.getValueAt(selectedRow, 1));
            
            cmbLinkEvent.setSelectedIndex(eventIndex);
            cmbLinkMenuItem.setSelectedIndex(menuItemIndex);
        }
    }//GEN-LAST:event_tblEventTypeMenuItemsMouseClicked

    private void cmbLinkMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbLinkMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbLinkMenuItemActionPerformed

    private void MainTabsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_MainTabsStateChanged
        Object selectedComponent = MainTabs.getSelectedComponent();
        if (selectedComponent != null) {
            if (selectedComponent == btnLogout) {
                userController.handleLogout(this);
            } else if (selectedComponent == tabNotifications) {
                loadNotifications();
            }
        }
    }//GEN-LAST:event_MainTabsStateChanged

    private void tblBookingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBookingsMouseClicked
        int selectedRow = tblBookings.getSelectedRow();
        if (selectedRow != -1) {
            int bookingId = (int)tblBookings.getValueAt(selectedRow, 0);
            BookingModel booking = bookingController.getBookingById(bookingId);
            //COLUMN 1
            cmbBookingEventType.setSelectedIndex(
                FrameUtils.getIndexByValue(cmbLinkEvent, booking.getEventType().getDescription())
            );
            ckbBookingDecorationOptIn.setSelected(booking.isDecorateOptIn());
            dtcBookingEventDate.setDate(Date.valueOf(booking.getEventDate()));

            //COLUMN 2
            txtBookingAdultCount.setText(Integer.toString(booking.getAdultCount()));
            txtBookingChildCount.setText(Integer.toString(booking.getChildCount()));
            txtBookingCalculatedPrice.setText(Double.toString(booking.getCalculatedPrice()));
            txtBookingVenueAddress.setText(booking.getVenueAddress());
            
            //COLUMN 3
            loadBookingMenuItems(booking.getEventTypeId(), booking);
            bookingController.setIsMenuItemsChanged(false);
            
            toggleBookingInputs(booking.getStatus());
        }
    }//GEN-LAST:event_tblBookingsMouseClicked

    private void btnBookingResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookingResetActionPerformed
        clearBookingInputs();
        toggleBookingInputs(BookingStatusTypes.Creating);
    }//GEN-LAST:event_btnBookingResetActionPerformed

    private void btnBookingAddMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookingAddMenuItemActionPerformed
        String selectedMenuItemDesc = cmbBookingMenuItem.getSelectedItem().toString();
        String selectedAmountString = txtBookingMenuItemAmount.getText();
        
        if (selectedMenuItemDesc == null || selectedMenuItemDesc.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a menu Item");
            return;
        }
        
        int selectedAmount;
        try {
            selectedAmount = Integer.parseInt(selectedAmountString);
            if (selectedAmount < 1) {
                JOptionPane.showMessageDialog(this, "Enter a number greater than 0 for amount");
                return;
            }    
        } catch(NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Enter a valid numeric number");
            return;
        }
        
        MenuItemModel selectedMenuItem = null;
        for (MenuItemModel menuItem : menuItemController.loadMenuItems()) {
            if (selectedMenuItemDesc.equals(menuItem.getDisplayText())) {
                selectedMenuItem = menuItem;
            }
        }
        
        if (selectedMenuItem != null) {
            if (!bookingMenuItemAlreadyExists(selectedMenuItem)) {
                DefaultTableModel model = (DefaultTableModel)tblBookingMenuItems.getModel();
                model.addRow(
                    new Object[] {
                        null,
                        selectedMenuItem.getCategoryType().getDescription(),
                        selectedMenuItem.getName(),
                        selectedAmount,
                        null
                    }
                );
                JOptionPane.showMessageDialog(this, "Menu Item added Successfully");
                clearBookingMenuItemInputs();
                bookingController.setIsMenuItemsChanged(true);
            } else {
                JOptionPane.showMessageDialog(this, "Menu Item Already Added");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a valid Menu Item");
        }
    }//GEN-LAST:event_btnBookingAddMenuItemActionPerformed

    private void cmbBookingEventTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbBookingEventTypeItemStateChanged
        
    }//GEN-LAST:event_cmbBookingEventTypeItemStateChanged

    private void tblBookingMenuItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBookingMenuItemsMouseClicked
        int selectedRow = tblBookingMenuItems.getSelectedRow();
        if (selectedRow != -1) {
            String menuItemCategory = tblBookingMenuItems.getValueAt(selectedRow, 1).toString();
            String menuItemName = tblBookingMenuItems.getValueAt(selectedRow, 2).toString();
            int menuItemAmount = (int)tblBookingMenuItems.getValueAt(selectedRow, 3);
            int menuItemIndex = FrameUtils.getIndexByValue(cmbBookingMenuItem, menuItemCategory + " - " + menuItemName);

            if (menuItemIndex == -1) {
                JOptionPane.showMessageDialog(this, "Please note the selected Menu Item is no longer available, please remove it");
                return;
            }

            cmbBookingMenuItem.setSelectedIndex(menuItemIndex);
            txtBookingMenuItemAmount.setText(Integer.toString(menuItemAmount));
        }
    }//GEN-LAST:event_tblBookingMenuItemsMouseClicked

    private void btnBookingUpdateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookingUpdateMenuItemActionPerformed
        int selectedRow = tblBookingMenuItems.getSelectedRow();
        if (selectedRow != -1) {
            String selectedMenuItemDesc = cmbBookingMenuItem.getSelectedItem().toString();
            String selectedAmountString = txtBookingMenuItemAmount.getText();

            if (selectedMenuItemDesc == null || selectedMenuItemDesc.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please select a menu Item");
                return;
            }

            int selectedAmount;
            try {
                selectedAmount = Integer.parseInt(selectedAmountString);
                if (selectedAmount < 1) {
                    JOptionPane.showMessageDialog(this, "Enter a number greater than 0 for amount");
                    return;
                }
            } catch(NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Enter a valid numeric number");
                return;
            }

            MenuItemModel selectedMenuItem = null;
            for (MenuItemModel menuItem : menuItemController.loadMenuItems()) {
                if (selectedMenuItemDesc.equals(menuItem.getDisplayText())) {
                    selectedMenuItem = menuItem;
                }
            }

            if (selectedMenuItem != null) {
                DefaultTableModel model = (DefaultTableModel)tblBookingMenuItems.getModel();
                int categoryColumnIndex = 1;
                int nameColumnIndex = 2;
                for (int row = 0; row < model.getRowCount(); row++) {
                    Object categoryValue = model.getValueAt(row, categoryColumnIndex);
                    Object nameValue = model.getValueAt(row, nameColumnIndex);

                    if (nameValue.equals(selectedMenuItem.getName()) && categoryValue.equals(selectedMenuItem.getCategoryType().getDescription())) {
                        model.setValueAt(selectedMenuItem.getCategoryType().getDescription(), row, 1);
                        model.setValueAt(selectedMenuItem.getName(), row, 2);
                        model.setValueAt(selectedAmount, row, 3);
                        model.setValueAt(null, row, 4);
                    }
                }
                JOptionPane.showMessageDialog(this, "Menu Item Updated");
                clearBookingMenuItemInputs();
                bookingController.setIsMenuItemsChanged(true);
            } else {
                JOptionPane.showMessageDialog(this, "Please select a valid Menu Item");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update");
        }
    }//GEN-LAST:event_btnBookingUpdateMenuItemActionPerformed

    private void btnBookingRemoveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookingRemoveMenuItemActionPerformed
        int selectedRow = tblBookingMenuItems.getSelectedRow();
        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel)tblBookingMenuItems.getModel();
            model.removeRow(selectedRow);
            clearBookingMenuItemInputs();
            bookingController.setIsMenuItemsChanged(true);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to remove");
        }
    }//GEN-LAST:event_btnBookingRemoveMenuItemActionPerformed

    private void btnBookingRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookingRemoveActionPerformed
        int selectedRow = tblBookings.getSelectedRow();
        if (selectedRow != -1) {
            int id = (int)tblBookings.getValueAt(selectedRow, 0);
            int confirmation = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to cancel the booking with ID: " + id + "?",
                "Confirm Cancellation",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
            );
                
            if (confirmation == JOptionPane.YES_OPTION) {
                if (bookingController.deleteBooking(id)) {
                    notificationController.handleCreateNotification(id, NotificationTypes.BookingCanceled);
                    clearBookingInputs();
                    loadBookings();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to remove");
        }
    }//GEN-LAST:event_btnBookingRemoveActionPerformed

    private void btnBookingAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookingAddActionPerformed
        if (cmbBookingEventType.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Please select a Event Type");
            return;
        }
        EventTypeModel eventType = eventTypeController.getEventTypeByDescription(cmbBookingEventType.getSelectedItem().toString());
        Boolean decorationOptIn = ckbBookingDecorationOptIn.isSelected();
        java.util.Date eventDate = dtcBookingEventDate.getDate();
        String venueAddress = txtBookingVenueAddress.getText();
        String adults = txtBookingAdultCount.getText();
        String children = txtBookingChildCount.getText();
        
        if (bookingController.addBooking(
            eventType.getId(),
            decorationOptIn,
            eventDate,
            venueAddress,
            adults,
            children,
            getBookingMenuItems()
        )) {
            clearBookingInputs();
            loadBookings();
        }
    }//GEN-LAST:event_btnBookingAddActionPerformed

    private void btnBookingUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookingUpdateActionPerformed
        int selectedRow = tblBookings.getSelectedRow();
        if (selectedRow != -1) {
            int id = (int)tblBookings.getValueAt(selectedRow, 0);
            if (cmbBookingEventType.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(this, "Please select a Event Type");
                return;
            }
            EventTypeModel eventType = eventTypeController.getEventTypeByDescription(cmbBookingEventType.getSelectedItem().toString());
            Boolean decorationOptIn = ckbBookingDecorationOptIn.isSelected();
            java.util.Date eventDate = dtcBookingEventDate.getDate();
            String venueAddress = txtBookingVenueAddress.getText();
            String adults = txtBookingAdultCount.getText();
            String children = txtBookingChildCount.getText();
            
            if (bookingController.updateBooking(
                id,
                eventType.getId(),
                decorationOptIn,
                eventDate,
                venueAddress,
                adults,
                children,
                getBookingMenuItems()
            )) {
                if (bookingController.IsMenuItemsChanged()) {
                    notificationController.handleCreateNotification(id, NotificationTypes.MenuChanged);
                }
                    
                clearBookingInputs();
                loadBookings();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update");
        }
    }//GEN-LAST:event_btnBookingUpdateActionPerformed

    private void btnBookingConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookingConfirmActionPerformed
        int selectedRow = tblBookings.getSelectedRow();
        if (selectedRow != -1) {
            if (BookingStatusTypes.fromDescription(tblBookings.getValueAt(selectedRow, 2).toString()) == BookingStatusTypes.Cancelled) {
                JOptionPane.showMessageDialog(this, "This booking has already been cancelled and cannot be confirmed");
                return;
            }
            
            int id = (int)tblBookings.getValueAt(selectedRow, 0);
            int confirmation = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to confirm this booking with ID: " + id + "?",
                "Confirm Cancellation",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
            );
                
            if (confirmation == JOptionPane.YES_OPTION) {
                if (bookingController.confirmBooking(id)) {
                    notificationController.handleCreateNotification(id, NotificationTypes.BookingConfirmed);
                    clearBookingInputs();
                    loadBookings();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to remove");
        }
    }//GEN-LAST:event_btnBookingConfirmActionPerformed

    private void btnDismissNotificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDismissNotificationActionPerformed
        int selectedRow = tblNotifications.getSelectedRow();
        if (selectedRow != -1) {
            int notificationId = (int)tblNotifications.getValueAt(selectedRow, 0);
            notificationController.handleDismissNotification(notificationId);
            loadNotifications();
        } else {
            JOptionPane.showMessageDialog(this, "Please select a notification to dismiss");
        }
    }//GEN-LAST:event_btnDismissNotificationActionPerformed

    private void btnNotificationRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNotificationRefreshActionPerformed
        loadNotifications();
    }//GEN-LAST:event_btnNotificationRefreshActionPerformed

    private void cmbBookingEventTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbBookingEventTypeActionPerformed
        loadBookingMenuItems(0, null);
        cmbBookingMenuItem.removeAllItems();
        if (cmbBookingEventType.getSelectedItem() != null) {
            EventTypeModel eventType = eventTypeController.getEventTypeByDescription(cmbBookingEventType.getSelectedItem().toString());
            if (eventType != null) {
                for (MenuItemModel item : menuItemController.loadMenuItemsByEventType(eventType.getId())) {
                    cmbBookingMenuItem.addItem(item.getDisplayText());
                }
            }
        }
    }//GEN-LAST:event_cmbBookingEventTypeActionPerformed

    private void clearEventInputs() {
        txtEventDescription.setText("");
        txtEventAmount.setText("");
    }
    
    private void clearBookingMenuItemInputs() {
        cmbBookingMenuItem.setSelectedIndex(-1);
        txtBookingMenuItemAmount.setText("");
    }
    
    private void loadEventTypes() {
        cmbLinkEvent.removeAllItems();
        FrameUtils.clearTableRows(tblEventTypes);
        DefaultTableModel model = (DefaultTableModel)tblEventTypes.getModel();
        for (EventTypeModel event : eventTypeController.loadEventTypes()) {
            model.addRow(
                new Object[] {
                    event.getId(),
                    event.getDescription(),
                    event.getBaseAmount()
                }
            );
            
            cmbLinkEvent.addItem(event.getDescription());
        }        
        loadBookingEventTypes();
    }
    
    private void clearMenuItemInputs() {
        txtMenuItemName.setText("");
        txtMenuItemDescription.setText("");
        cmbMenuItemCategoryType.setSelectedIndex(-1);
        txtMenuItemPrice.setText("");
    }
    
    private void loadMenuItems() {
        cmbLinkMenuItem.removeAllItems();
        FrameUtils.clearTableRows(tblMenuItems);
        DefaultTableModel model = (DefaultTableModel)tblMenuItems.getModel();
        for (MenuItemModel item : menuItemController.loadMenuItems()) {
            model.addRow(
                new Object[] {
                    item.getId(),
                    item.getName(),
                    item.getDescription(),
                    item.getCategoryType().getDescription(),
                    item.getPrice()
                }
            );
            cmbLinkMenuItem.addItem(item.getName());
        }
    }
    
    private void clearEventTypesLinkedMenuItemsInputs() {
        cmbLinkEvent.setSelectedIndex(-1);
        cmbLinkMenuItem.setSelectedIndex(-1);
    }
    
    private void loadEventTypesLinkedMenuItems() {
        FrameUtils.clearTableRows(tblEventTypeMenuItems);
        DefaultTableModel model = (DefaultTableModel)tblEventTypeMenuItems.getModel();
        eventTypeController.loadEventTypesLinkedMenuItems().forEach((eventType, menuItems) -> {
            menuItems.forEach(menuItem -> {
                model.addRow(
                    new Object[] {
                        eventType.getDescription(),
                        menuItem.getName()
                    }
                );
            });
        });
    }
    
    private void toggleBookingInputs(BookingStatusTypes type) {
        switch (type) {
            case BookingStatusTypes.Creating:
            {
                //COLUMN 1
                cmbBookingEventType.setEnabled(true);
                ckbBookingDecorationOptIn.setEnabled(true);
                dtcBookingEventDate.setEnabled(true);

                //COLUMN 2
                txtBookingAdultCount.setEnabled(true);
                txtBookingChildCount.setEnabled(true);
                txtBookingCalculatedPrice.setEnabled(false);
                txtBookingVenueAddress.setEnabled(true);
                
                //COLUMN 3
                cmbBookingMenuItem.setEnabled(true);
                txtBookingMenuItemAmount.setEnabled(true);
            }
            break;
            case BookingStatusTypes.Pending:
            {
                //COLUMN 1
                cmbBookingEventType.setEnabled(false);
                ckbBookingDecorationOptIn.setEnabled(false);
                dtcBookingEventDate.setEnabled(false);

                //COLUMN 2
                txtBookingAdultCount.setEnabled(false);
                txtBookingChildCount.setEnabled(false);
                txtBookingCalculatedPrice.setEnabled(false);
                txtBookingVenueAddress.setEnabled(false);
                
                //COLUMN 3
                cmbBookingMenuItem.setEnabled(true);
                txtBookingMenuItemAmount.setEnabled(true);
            }
            break;
            case BookingStatusTypes.Confirmed:
            case BookingStatusTypes.Cancelled:
            {
                //COLUMN 1
                cmbBookingEventType.setEnabled(false);
                ckbBookingDecorationOptIn.setEnabled(false);
                dtcBookingEventDate.setEnabled(false);

                //COLUMN 2
                txtBookingAdultCount.setEnabled(false);
                txtBookingChildCount.setEnabled(false);
                txtBookingCalculatedPrice.setEnabled(false);
                txtBookingVenueAddress.setEnabled(false);
                
                //COLUMN 3
                cmbBookingMenuItem.setEnabled(false);
                txtBookingMenuItemAmount.setEnabled(false);
            }
            break;
            default:
                break;
        }
    }
    
    private void clearBookingInputs() {
        //COLUMN 1
        cmbBookingEventType.setSelectedIndex(-1);
        ckbBookingDecorationOptIn.setSelected(false);
        dtcBookingEventDate.setDate(null);
        
        //COLUMN 2
        txtBookingAdultCount.setText("");
        txtBookingChildCount.setText("");
        txtBookingCalculatedPrice.setText("");
        txtBookingVenueAddress.setText("");
        
        //COLUMN 3
        clearBookingMenuItemInputs();
        FrameUtils.clearTableRows(tblBookingMenuItems);
    }
    
    private void loadBookings() {
        FrameUtils.clearTableRows(tblBookings);
        
        DefaultTableModel model = (DefaultTableModel)tblBookings.getModel();
        for (BookingModel booking : bookingController.loadBookings()) {
            model.addRow(
                new Object[] {
                    booking.getId(),
                    booking.getEventType().getDescription(),
                    booking.getStatus().getDescription(),
                    booking.isDecorateOptIn(),
                    booking.getEventDate(),
                    booking.getAdultCount(),
                    booking.getChildCount(),
                    booking.getCalculatedPrice(),
                    booking.getVenueAddress()
                }
            );
        }
    }
    
    private void loadBookingEventTypes() {
        cmbBookingEventType.removeAllItems();
        for (EventTypeModel type : eventTypeController.loadEventTypes()) {
            cmbBookingEventType.addItem(type.getDescription());
        }
    }
    
    private void loadBookingMenuItems(int eventTypeId, BookingModel booking) {
        FrameUtils.clearTableRows(tblBookingMenuItems);
        if (booking != null) {
            DefaultTableModel model = (DefaultTableModel)tblBookingMenuItems.getModel();
            for (Map.Entry<MenuItemModel, Integer> item : booking.getLinkedMenuItems().entrySet()) {
                model.addRow(
                    new Object[] {
                        item.getKey().getId(),
                        item.getKey().getCategoryType().getDescription(),
                        item.getKey().getName(),
                        item.getValue(),
                        booking.calculateMenuItemPrice(item.getKey())
                    }
                );
            }
        }
    }
    
    private void loadNotifications() {
        FrameUtils.clearTableRows(tblNotifications);
        DefaultTableModel model = (DefaultTableModel)tblNotifications.getModel();
        for (NotificationModel notification : notificationController.loadNotifications()) {
            model.addRow(
                new Object[] {
                    notification.getId(),
                    notification.getBookingId(),
                    notification.getMessage(),
                    notification.getNotificationType(),
                    notification.getDateCreated(),
                }
            );
        }
    }
    
    private Map<MenuItemModel, Integer> getBookingMenuItems() {
        Map<MenuItemModel, Integer> bookingMenuItems = new HashMap<>();

        DefaultTableModel model = (DefaultTableModel)tblBookingMenuItems.getModel();
        for (int row = 0; row < model.getRowCount(); row++) {
            int amount = (int) model.getValueAt(row, 3);
            
            String category = (String) model.getValueAt(row, 1);
            String name = (String) model.getValueAt(row, 2);

            MenuItemModel menuItem = menuItemController.getMenuItemByDisplayText(category + " - " + name);
            if (menuItem == null) {
                continue;
            }
            bookingMenuItems.put(menuItem, amount);
        }

        return bookingMenuItems;
    }
    
    private Boolean bookingMenuItemAlreadyExists(MenuItemModel selectedMenuItem) {
        DefaultTableModel model = (DefaultTableModel)tblBookingMenuItems.getModel();
        int categoryColumnIndex = 1;
        int nameColumnIndex = 2;
        for (int row = 0; row < model.getRowCount(); row++) {
            Object categoryValue = model.getValueAt(row, categoryColumnIndex);
            Object nameValue = model.getValueAt(row, nameColumnIndex);

            if (nameValue != null && nameValue.equals(selectedMenuItem.getName())
                && categoryValue != null && categoryValue.equals(selectedMenuItem.getCategoryType())
            ) {
                return true;
            }
        }
        return false;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane MainTabs;
    private javax.swing.JButton btnAddEvent;
    private javax.swing.JButton btnAddLink;
    private javax.swing.JButton btnAddMenuItem;
    private javax.swing.JButton btnBookingAdd;
    private javax.swing.JButton btnBookingAddMenuItem;
    private javax.swing.JButton btnBookingConfirm;
    private javax.swing.JButton btnBookingRemove;
    private javax.swing.JButton btnBookingRemoveMenuItem;
    private javax.swing.JButton btnBookingReset;
    private javax.swing.JButton btnBookingUpdate;
    private javax.swing.JButton btnBookingUpdateMenuItem;
    private javax.swing.JButton btnDismissNotification;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnNotificationRefresh;
    private javax.swing.JButton btnRemoveEvent;
    private javax.swing.JButton btnRemoveLink;
    private javax.swing.JButton btnRemoveMenuItem;
    private javax.swing.JButton btnResetEvent;
    private javax.swing.JButton btnResetLink;
    private javax.swing.JButton btnResetMenuItem;
    private javax.swing.JButton btnUpdateEvent;
    private javax.swing.JButton btnUpdateMenuItem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.ButtonGroup buttonGroup8;
    private javax.swing.JCheckBox ckbBookingDecorationOptIn;
    private javax.swing.JComboBox<String> cmbBookingEventType;
    private javax.swing.JComboBox<String> cmbBookingMenuItem;
    private javax.swing.JComboBox<String> cmbLinkEvent;
    private javax.swing.JComboBox<String> cmbLinkMenuItem;
    private javax.swing.JComboBox<String> cmbMenuItemCategoryType;
    private com.toedter.calendar.JDateChooser dtcBookingEventDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lblBookingAdultCount;
    private javax.swing.JLabel lblBookingCalculatedPrice;
    private javax.swing.JLabel lblBookingChildCount;
    private javax.swing.JLabel lblBookingDecorateOptIn;
    private javax.swing.JLabel lblBookingEventDate;
    private javax.swing.JLabel lblBookingEventType;
    private javax.swing.JLabel lblBookingMenuItem;
    private javax.swing.JLabel lblBookingMenuItemAmount;
    private javax.swing.JLabel lblBookingVenueAddress;
    private javax.swing.JLabel lblEventAmount;
    private javax.swing.JLabel lblEventDescription;
    private javax.swing.JLabel lblLinkEvent;
    private javax.swing.JLabel lblLinkMenuItem;
    private javax.swing.JLabel lblMenuItemCategoryType;
    private javax.swing.JLabel lblMenuItemDescription;
    private javax.swing.JLabel lblMenuItemName;
    private javax.swing.JLabel lblMenuItemPrice;
    private javax.swing.JLabel lblNotifications;
    private javax.swing.JPanel pnlBookingDetails;
    private javax.swing.JPanel tabBookings;
    private javax.swing.JPanel tabEventTypes;
    private javax.swing.JPanel tabLinkMenuItemsToEventTypes;
    private javax.swing.JPanel tabMenuItems;
    private javax.swing.JPanel tabNotifications;
    private javax.swing.JTable tblBookingMenuItems;
    private javax.swing.JTable tblBookings;
    private javax.swing.JTable tblEventTypeMenuItems;
    private javax.swing.JTable tblEventTypes;
    private javax.swing.JTable tblMenuItems;
    private javax.swing.JTable tblNotifications;
    private javax.swing.JTextField txtBookingAdultCount;
    private javax.swing.JTextField txtBookingCalculatedPrice;
    private javax.swing.JTextField txtBookingChildCount;
    private javax.swing.JTextField txtBookingMenuItemAmount;
    private javax.swing.JTextArea txtBookingVenueAddress;
    private javax.swing.JTextField txtEventAmount;
    private javax.swing.JTextField txtEventDescription;
    private javax.swing.JTextField txtMenuItemDescription;
    private javax.swing.JTextField txtMenuItemName;
    private javax.swing.JTextField txtMenuItemPrice;
    // End of variables declaration//GEN-END:variables
}
